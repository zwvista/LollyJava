/**
 * This class is generated by jOOQ
 */
package com.zwstudio.lolly.jooq.tables;


import com.zwstudio.lolly.jooq.DefaultSchema;
import com.zwstudio.lolly.jooq.Keys;
import com.zwstudio.lolly.jooq.tables.records.DictionariesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictionaries extends TableImpl<DictionariesRecord> {

    private static final long serialVersionUID = -669777063;

    /**
     * The reference instance of <code>DICTIONARIES</code>
     */
    public static final Dictionaries DICTIONARIES = new Dictionaries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictionariesRecord> getRecordType() {
        return DictionariesRecord.class;
    }

    /**
     * The column <code>DICTIONARIES.ID</code>.
     */
    public final TableField<DictionariesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.LANGIDFROM</code>.
     */
    public final TableField<DictionariesRecord, Integer> LANGIDFROM = createField("LANGIDFROM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.LANGIDTO</code>.
     */
    public final TableField<DictionariesRecord, Integer> LANGIDTO = createField("LANGIDTO", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.NAME</code>.
     */
    public final TableField<DictionariesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.SEQNUM</code>.
     */
    public final TableField<DictionariesRecord, Integer> SEQNUM = createField("SEQNUM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.DICTTYPEID</code>.
     */
    public final TableField<DictionariesRecord, Integer> DICTTYPEID = createField("DICTTYPEID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DICTIONARIES.URL</code>.
     */
    public final TableField<DictionariesRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>DICTIONARIES.CHCONV</code>.
     */
    public final TableField<DictionariesRecord, String> CHCONV = createField("CHCONV", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'UTF-8'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>DICTIONARIES.AUTOMATION</code>.
     */
    public final TableField<DictionariesRecord, String> AUTOMATION = createField("AUTOMATION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>DICTIONARIES.AUTOJUMP</code>.
     */
    public final TableField<DictionariesRecord, Object> AUTOJUMP = createField("AUTOJUMP", org.jooq.impl.DefaultDataType.getDefaultDataType("BOOL"), this, "");

    /**
     * The column <code>DICTIONARIES.DICTTABLE</code>.
     */
    public final TableField<DictionariesRecord, String> DICTTABLE = createField("DICTTABLE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>DICTIONARIES.TEMPLATE</code>.
     */
    public final TableField<DictionariesRecord, String> TEMPLATE = createField("TEMPLATE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>DICTIONARIES</code> table reference
     */
    public Dictionaries() {
        this("DICTIONARIES", null);
    }

    /**
     * Create an aliased <code>DICTIONARIES</code> table reference
     */
    public Dictionaries(String alias) {
        this(alias, DICTIONARIES);
    }

    private Dictionaries(String alias, Table<DictionariesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dictionaries(String alias, Table<DictionariesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictionariesRecord> getPrimaryKey() {
        return Keys.PK_DICTIONARIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictionariesRecord>> getKeys() {
        return Arrays.<UniqueKey<DictionariesRecord>>asList(Keys.PK_DICTIONARIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DictionariesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DictionariesRecord, ?>>asList(Keys.FK_DICTIONARIES_LANGUAGES_2, Keys.FK_DICTIONARIES_LANGUAGES_1, Keys.FK_DICTIONARIES_DICTTYPES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dictionaries as(String alias) {
        return new Dictionaries(alias, this);
    }

    /**
     * Rename this table
     */
    public Dictionaries rename(String name) {
        return new Dictionaries(name, null);
    }
}
