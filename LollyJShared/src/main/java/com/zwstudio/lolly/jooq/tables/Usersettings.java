/**
 * This class is generated by jOOQ
 */
package com.zwstudio.lolly.jooq.tables;


import com.zwstudio.lolly.jooq.DefaultSchema;
import com.zwstudio.lolly.jooq.Keys;
import com.zwstudio.lolly.jooq.tables.records.UsersettingsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usersettings extends TableImpl<UsersettingsRecord> {

    private static final long serialVersionUID = -1881483753;

    /**
     * The reference instance of <code>USERSETTINGS</code>
     */
    public static final Usersettings USERSETTINGS = new Usersettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersettingsRecord> getRecordType() {
        return UsersettingsRecord.class;
    }

    /**
     * The column <code>USERSETTINGS.ID</code>.
     */
    public final TableField<UsersettingsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USERSETTINGS.USERID</code>.
     */
    public final TableField<UsersettingsRecord, Integer> USERID = createField("USERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USERSETTINGS.KIND</code>.
     */
    public final TableField<UsersettingsRecord, Integer> KIND = createField("KIND", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USERSETTINGS.ENTITYID</code>.
     */
    public final TableField<UsersettingsRecord, Integer> ENTITYID = createField("ENTITYID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USERSETTINGS.VALUE1</code>.
     */
    public final TableField<UsersettingsRecord, String> VALUE1 = createField("VALUE1", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>USERSETTINGS.VALUE2</code>.
     */
    public final TableField<UsersettingsRecord, String> VALUE2 = createField("VALUE2", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>USERSETTINGS.VALUE3</code>.
     */
    public final TableField<UsersettingsRecord, String> VALUE3 = createField("VALUE3", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>USERSETTINGS.VALUE4</code>.
     */
    public final TableField<UsersettingsRecord, String> VALUE4 = createField("VALUE4", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>USERSETTINGS.VALUE5</code>.
     */
    public final TableField<UsersettingsRecord, String> VALUE5 = createField("VALUE5", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>USERSETTINGS</code> table reference
     */
    public Usersettings() {
        this("USERSETTINGS", null);
    }

    /**
     * Create an aliased <code>USERSETTINGS</code> table reference
     */
    public Usersettings(String alias) {
        this(alias, USERSETTINGS);
    }

    private Usersettings(String alias, Table<UsersettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usersettings(String alias, Table<UsersettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersettingsRecord> getPrimaryKey() {
        return Keys.PK_USERSETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersettingsRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersettingsRecord>>asList(Keys.PK_USERSETTINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersettingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersettingsRecord, ?>>asList(Keys.FK_USERSETTINGS_USERS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usersettings as(String alias) {
        return new Usersettings(alias, this);
    }

    /**
     * Rename this table
     */
    public Usersettings rename(String name) {
        return new Usersettings(name, null);
    }
}
