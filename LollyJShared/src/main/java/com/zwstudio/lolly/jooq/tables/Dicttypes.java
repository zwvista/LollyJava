/**
 * This class is generated by jOOQ
 */
package com.zwstudio.lolly.jooq.tables;


import com.zwstudio.lolly.jooq.DefaultSchema;
import com.zwstudio.lolly.jooq.Keys;
import com.zwstudio.lolly.jooq.tables.records.DicttypesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dicttypes extends TableImpl<DicttypesRecord> {

    private static final long serialVersionUID = 211235592;

    /**
     * The reference instance of <code>DICTTYPES</code>
     */
    public static final Dicttypes DICTTYPES = new Dicttypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DicttypesRecord> getRecordType() {
        return DicttypesRecord.class;
    }

    /**
     * The column <code>DICTTYPES.ID</code>.
     */
    public final TableField<DicttypesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("null", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>DICTTYPES.NAME</code>.
     */
    public final TableField<DicttypesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("null", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>DICTTYPES</code> table reference
     */
    public Dicttypes() {
        this("DICTTYPES", null);
    }

    /**
     * Create an aliased <code>DICTTYPES</code> table reference
     */
    public Dicttypes(String alias) {
        this(alias, DICTTYPES);
    }

    private Dicttypes(String alias, Table<DicttypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dicttypes(String alias, Table<DicttypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DicttypesRecord> getPrimaryKey() {
        return Keys.PK_DICTTYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DicttypesRecord>> getKeys() {
        return Arrays.<UniqueKey<DicttypesRecord>>asList(Keys.PK_DICTTYPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dicttypes as(String alias) {
        return new Dicttypes(alias, this);
    }

    /**
     * Rename this table
     */
    public Dicttypes rename(String name) {
        return new Dicttypes(name, null);
    }
}
